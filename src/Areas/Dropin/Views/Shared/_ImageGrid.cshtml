@model IEnumerable<File>
@{
  var count = Model?.Count() ?? 0;
  var index = 0;
  var limit = 3;
  var thumbSize = 512;
  var maxScale = 2;
  var baseSize = 64;
}

<div class="wy-image-grid">
    @foreach (var img in Model.Take(limit)) {
        // we don't have proper resizing of animated gifs/svgs so we use the original image instead of a thumbnail
        var blob = img.Blob;
        var ext = FileUtils.GetExtension(blob.Name);
        var ani = ext.Equals(".gif") || ext.Equals(".svg");
        var src = ani ? img.Url() : img.ThumbUrl(thumbSize, thumbSize);

        // calculate padding and flex for positioning and scaling
        var ratio = blob.Ratio();
        var padding = (100 / ratio).ToString("0.00000", System.Globalization.CultureInfo.InvariantCulture) + "%";
        var flexRatio = ratio.ToString("0.00000", System.Globalization.CultureInfo.InvariantCulture);
        var flexBasis = (ratio * baseSize).ToString("0.00000", System.Globalization.CultureInfo.InvariantCulture) + "px";
        var intrinsicWidth = blob.Width + "px";
        var maxWidth = (blob.Width * maxScale) + "px";

        <div class="wy-image" style="flex: @flexRatio @flexRatio @flexBasis; width: @intrinsicWidth; max-width: @maxWidth;">
            <a asp-controller="@typeof(PreviewController).ControllerName()" asp-action="@nameof(PreviewController.Get)" asp-route-id="@img.Id" target="preview" title="@img.Name" class="wy-image-area" style="padding-bottom: @padding;">
                <img src="@src" alt="" loading="lazy" decoding="async" />
                @if (count > limit && index == limit - 1) {
                    // display number of additional images
                    <span class="wy-more">+@Model.Skip(limit).Count()</span>
                }
            </a>
        </div>

        index++;
    }


</div>
